"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3885],{9859:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var t=a(4848),r=a(8453),s=a(1470),i=a(9365);const o={sidebar_position:4},l="JavaScript",c={id:"Readings/javascript",title:"JavaScript",description:'"Any application that can be written in JavaScript, will eventually be written in JavaScript."',source:"@site/docs/Readings/javascript.md",sourceDirName:"Readings",slug:"/Readings/javascript",permalink:"/docs/Readings/javascript",draft:!1,unlisted:!1,editUrl:"https://github.com/CS61D/website/tree/main/docs/Readings/javascript.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"4.6 - Rendering Lists",permalink:"/docs/Readings/basic-react/4.6"},next:{title:"Lecture 5 \u2014 React State",permalink:"/docs/Readings/react-state/"}},d={},u=[{value:"Links",id:"links",level:2},{value:"Why JavaScript?",id:"why-javascript",level:2},{value:"Browser versus Node.js",id:"browser-versus-nodejs",level:2},{value:"Basic Syntax Speedrun",id:"basic-syntax-speedrun",level:2},{value:"Variables",id:"variables",level:3},{value:"Control Flow",id:"control-flow",level:3},{value:"Functions",id:"functions",level:3},{value:"Arrays and array methods",id:"arrays-and-array-methods",level:2},{value:"Basic Array Looping and Accessing",id:"basic-array-looping-and-accessing",level:3},{value:"Utility Array Functions",id:"utility-array-functions",level:3},{value:"Higher Order Array Functions",id:"higher-order-array-functions",level:3},{value:"Objects and JSON",id:"objects-and-json",level:2},{value:"Destructuring",id:"destructuring",level:3},{value:"Spread Operator",id:"spread-operator",level:3},{value:"Asynchronous JavaScript",id:"asynchronous-javascript",level:2},{value:"Promises",id:"promises",level:3},{value:"Error Handling and (Try/Catch)",id:"error-handling-and-trycatch",level:2},{value:"JavaScript Data Structures",id:"javascript-data-structures",level:2},{value:"Date",id:"date",level:3},{value:"Set",id:"set",level:3},{value:"Map",id:"map",level:3}];function h(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",span:"span",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"javascript",children:"JavaScript"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:['"Any application that ',(0,t.jsx)(n.em,{children:"can"}),' be written in JavaScript, will eventually be written in JavaScript."']}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["-- Jeff Atwood, co-founder of Stack Overflow, in a ",(0,t.jsxs)(n.a,{href:"https://blog.codinghorror.com/the-principle-of-least-power/",rel:"nofollow",children:["2007 blog post",(0,t.jsx)(n.span,{children:(0,t.jsx)(n.span,{className:"glossary-icon",children:" \u2197"})})]})]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:'"JavaScript is the only language that I\u2019m aware of that people feel they don\u2019t need to learn before they start using it"'}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["-- Douglas Crockford, author of ",(0,t.jsx)(n.em,{children:"JavaScript: The Good Parts"})," and creator of the JSON file format"]}),"\n",(0,t.jsx)(n.h2,{id:"links",children:"Links"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsxs)(n.a,{href:"https://www.youtube.com/watch?v=TrAyq1hSUpI",rel:"nofollow",children:["JavaScript Lecture",(0,t.jsx)(n.span,{children:(0,t.jsx)(n.img,{src:"/img/link-icons/youtube.svg",alt:"youtube",className:"glossary-icon",style:{width:"16px",height:"16px",marginLeft:"0.25rem",verticalAlign:"baseline"}})})]})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsxs)(n.a,{href:"https://github.com/CS61D/Lecture-JavaScript",rel:"nofollow",children:["JavaScript Lecture Code",(0,t.jsx)(n.span,{children:(0,t.jsx)(n.img,{src:"/img/link-icons/github.svg",alt:"github",className:"github-icon",style:{width:"16px",height:"16px",marginLeft:"0.25rem",verticalAlign:"baseline"}})})]})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"why-javascript",children:"Why JavaScript?"}),"\n",(0,t.jsx)(n.p,{children:"JavaScript is the only programming language which can run natively in a web browser. If you ever want to build a frontend web UI that isn't static markup, you need to know JavaScript."}),"\n",(0,t.jsx)(n.p,{children:"There are many more options on the backend, but JavaScript is a serviceable choice. This means that you can kill two birds with one stone and become a fullstack developer while only learning one language."}),"\n",(0,t.jsx)(n.p,{children:"JavaScript is an interpreted language (like python), compared to a compiled language like C++ or Java. This means that it will never have a performance ceiling as high as a compiled language, but it is more than good enough. For any small application without tens of thousands of users (a.k.a your beginner side projects), the most important factor is the speed of iteration and ease of development, which using the same language on the frontend and backend undoubtedly helps with."}),"\n",(0,t.jsx)(n.h2,{id:"browser-versus-nodejs",children:"Browser versus Node.js"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)(n.a,{href:"https://nodejs.org/en/",rel:"nofollow",children:["Node.js",(0,t.jsx)(n.span,{children:(0,t.jsx)(n.span,{className:"glossary-icon",children:" \u2197"})})]})," is a JavaScript execution engine that runs outside of the browser. There are other ways of running JavaScript outside of a web browser, but the differences between them are insignificant for out purposes. The only distinction you need to think about is client side JavaScript (in the browser) versus server side JavaScript (Node.js)."]}),"\n",(0,t.jsx)(n.p,{children:"JavaScript works the same way in the browser and in Node.js, but they have access to different APIs (a.k.a they can do different things) by virtue of the environment they are running in. For example, a browser application can't directly access a your device file system. Similarly, a web server running Node.js in a data center somewhere can't change your website UI into dark mode when a button is clicked."}),"\n",(0,t.jsx)(n.h2,{id:"basic-syntax-speedrun",children:"Basic Syntax Speedrun"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["61d generally assumes that you have at least a small amount of general ",(0,t.jsx)(n.em,{children:"programming"}),' experience, even if you don\'t have any web dev experience. If you are unfamiliar with terms like "variable", "function", or "loop", the beginning of 61d may be a bit too fast paced.']})}),"\n",(0,t.jsx)(n.h3,{id:"variables",children:"Variables"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'let age = 21; // let defines a mutable variable\nconst name = "Aidan"; // const defines a constant\n'})}),"\n",(0,t.jsx)(n.h3,{id:"control-flow",children:"Control Flow"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'// All these values will evaluate to false when used in a conditional\nlet falsyValues = ["", null, undefined, 0, false];\n\nlet age = 19;\nif (age >= 30) {\n  console.log("Welcome to our establishment"); // Log to command line\n} else if (age >= 21) {\n  console.log("Let me check your ID");\n} else {\n  console.log("Not old enough");\n}\n\n// Ternary operator, evaluates to first term if condition is true,\n// or second term if condition is false\nconst response = age >= 21 ? "Allowed" : "Not allowed";\n\n// Other operators\n// || is the OR operator\n// && is the AND operator\n// the NOT operator is !\n'})}),"\n",(0,t.jsx)(n.h3,{id:"functions",children:"Functions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// function declaration, that takes a name argument\nfunction greet(name) {\n  console.log(`Hello ${name}`); // Template string\n}\n\n// arrow function syntax\nconst goodbye = (firstName, lastName) => {\n  console.log(`Goodbye ${firstName} ${lastName}`);\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"Either method of defining"}),"\n",(0,t.jsx)(n.h2,{id:"arrays-and-array-methods",children:"Arrays and array methods"}),"\n",(0,t.jsx)(n.p,{children:"An array is just another word for a list of items. In JavaScript, array sizing is dynamic, meaning you do not have to define the size of the array ahead of time."}),"\n",(0,t.jsx)(n.h3,{id:"basic-array-looping-and-accessing",children:"Basic Array Looping and Accessing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'//* Arrays with loops\nconst names = ["Alice", "Bob", "Charlie"];\n\n// Loop by value\nfor (const name of names) {\n  console.log(name);\n}\n\n// for loop by index\nfor (let i = 0; i < names.length; i++) {\n  console.log(names[i]);\n}\n\n// Loop by value and index\nfor (const [index, name] of names.entries()) {\n  console.log(index, name);\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"utility-array-functions",children:"Utility Array Functions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23];\n\n// Get index or check for value\nconst indexOfEleven = primes.indexOf(11); // 4\nconst includesSeven = primes.includes(7); // true\n\n// Slicing\nconst firstThreePrimes = primes.slice(0, 3); // [2, 3, 5]\nconst primesAfterFive = primes.slice(3); // [7, 11, 13, 17, 19, 23]\nconst lastThreePrimes = primes.slice(-3); // [17, 19, 23]\n\n// Mutating\nprimes.push(29); // Adds 29 to array, does not\nprimes.shift(); // returns 2 and deletes from array\nprimes.pop(); // returns 29 and deletes from array\n\n// Flattening\nconst nested = [\n  [1, 2],\n  [3, 4],\n];\nconst flat = nested.flat(); // [1,2,3,4]\n"})}),"\n",(0,t.jsx)(n.h3,{id:"higher-order-array-functions",children:"Higher Order Array Functions"}),"\n",(0,t.jsx)(n.p,{children:"An extremely common pattern is to loop through all elements of an array and perform some kind of transformation or calculation on all the elements. This always can be accomplished with traditional for loops, but the preferred approach is to use built in higher order array functions. They are more concise, and easier to immediately interpret the effect of than a traditional loop."}),"\n",(0,t.jsxs)(n.p,{children:["All of these methods have a similar structure. They take in a function as an argument (a callback function) which determines what operation should be computed on each item, and apply it to each item in the array. The five most useful of these methods are ",(0,t.jsx)(n.code,{children:"map"}),", ",(0,t.jsx)(n.code,{children:"filter"}),", ",(0,t.jsx)(n.code,{children:"reduce"}),", ",(0,t.jsx)(n.code,{children:"some"}),", and ",(0,t.jsx)(n.code,{children:"every"}),"."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"map"}),": Perform a transformation to every element in the array"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"filter"}),": Remove elements from the array that do not meet a certain condition"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"reduce"}),": Combine the elements of the array in some way, such as summing them all together."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"some"}),": Check if at least one value in the array satisfies a condition"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"every"}),": Check if all values in the array satisfy a condition"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const numbers = [1, 2, 3, 4];\n\n// Functions give access to the value at the current index,\n// the current index, and the array itself if needed\nconst doubled = numbers.map((value, index, array) => value * 2); // [2, 4, 6, 8]\nconst odd = numbers.filter((value) => value % 2 === 1); // [1, 3]\nconst allNumbersLessThanFour = numbers.every((value) => value < 4);\nconst aNumberLessThanFour = numbers.some((value) => value < 4);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The syntax for ",(0,t.jsx)(n.code,{children:"reduce"})," is a bit more complicated, as its callback function processes a current value and a previous value. You also must pass an initial value, which serves as the previous value for the first item in the array."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const numbers = [1, 2, 3, 4];\nconst sum = numbers.reduce((prev, curr) => prev + curr, 0); // Our sum starts at zero\n"})}),"\n",(0,t.jsx)(n.h2,{id:"objects-and-json",children:"Objects and JSON"}),"\n",(0,t.jsx)(n.p,{children:"Objects in JavaScript are hierarchical structure that maps keys to values. They are similar to dictionaries in Python. Since JavaScript objects are processed while your code is running, they can store any valid JavaScript data type."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Create an object\nconst myObject = {\n  name: "Aidan",\n  age: 20,\n  duesPaid: true,\n  infractions: null,\n  courses: ["data structure", "roman history", "statistics"],\n  requirements: {\n    general: true,\n    lowerDivision: true,\n    upperDivision: false,\n  },\n  registrationDate: new Date(), // Date object\n};\n\n// Accessing object properties\nconsole.log(myObject.name); // Aidan\nconsole.log(myObject["name"]); // Aidan\nconsole.log(myObject.requirements.general); // true\nconsole.log(myObject.courses[0]); // data structure\n\n// Modifying object properties\nmyObject.age = 21;\n'})}),"\n",(0,t.jsx)(n.p,{children:"JavaScript objects are useful when we are running JavaScript code, but they don't work well for storing data in a file or sending data over the internet since they can only be understood when running JavaScript code. In such cases, we use JavaScript Object Notation (JSON) which is a file format based on JavaScript objects."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "name": "Aidan",\n  "age": 20,\n  "duesPaid": true,\n  "infractions": null,\n  "courses": ["data structure", "roman history", "statistics"],\n  "requirements": {\n    "general": true,\n    "lowerDivision": true,\n    "upperDivision": false\n  },\n  "registrationDate": "2021-09-01T00:00:00.000Z"\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["JSON is a ",(0,t.jsx)(n.em,{children:"subset"})," of JavaScript objects, meaning that all JSON is valid JavaScript objects, but not all JavaScript objects are valid JSON. JSON only supports strings, numbers, booleans, null, arrays, and nested JSON objects. Additionally, all properties must be declared with double quotes and the final item in the object may not have a comma (no trailing commas)."]}),"\n",(0,t.jsx)(n.p,{children:"These stricter formatting rules allow JSON to be parsed by any programming language, not just JavaScript. This makes it the most common format for sending data back and forth between a frontend and backend."}),"\n",(0,t.jsx)(n.h3,{id:"destructuring",children:"Destructuring"}),"\n",(0,t.jsxs)(n.p,{children:["If an object property is frequently accessed, it can be useful to ",(0,t.jsx)(n.em,{children:"destructure"})," it into a variable. These destructured variables can also be renamed, to make them easier to understand in the context of the code."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Create an object\nconst student1 = {\n  name: "Aidan",\n  age: 20,\n};\n\nconst student2 = {\n  name: "Catherine",\n  age: 19,\n};\n\nconsole.log(student1.name); // Aidan\n\n// Destructuring object properties\nconst { name, age } = student1;\nconsole.log(name); // Aidan\nconsole.log(age); // 20\n\n// With renaming\nconst { name: studentName, age: studentAge } = student2;\nconsole.log(studentName); // Catherine\n'})}),"\n",(0,t.jsx)(n.h3,{id:"spread-operator",children:"Spread Operator"}),"\n",(0,t.jsxs)(n.p,{children:["A frequent operation in JavaScript is to create a new objects based on a existing objects. The ",(0,t.jsx)(n.em,{children:"spread operator"})," (...) allows you to ",(0,t.jsx)(n.em,{children:"expand"})," an object into its individual properties."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const attackingStats = {\n  points: 5,\n  assists: 3,\n};\nconst defensiveStats = {\n  rebounds: 1,\n  blocks: 3,\n};\n\n// Create a new object with all the properties of attackingStats and defensiveStats\nconst fullStats = { ...attackingStats, ...defensiveStats };\n"})}),"\n",(0,t.jsx)(n.p,{children:"An important property to take note of is that an object can't have duplicate keys, meaning that repeated keys will be overwritten by the last key in the object. This allows you to create a new object with the same properties as an existing object, but with some properties changed."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'const player = {\n  name: "Aidan",\n  age: 20,\n  position: "Guard",\n};\n\n// Create a new object with all the properties of player, but with a new age\nconst olderPlayer = { ...player, age: 21 };\n'})}),"\n",(0,t.jsx)(n.p,{children:"The same spread syntax can be used to create a new array based on an existing array. This is useful when you want to combine two arrays into one."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const firstHalf = [1, 2, 3];\nconst secondHalf = [4, 5, 6];\n\n// Create a new array with all the elements of firstHalf and secondHalf\nconst fullArray = [...firstHalf, ...secondHalf];\n"})}),"\n",(0,t.jsx)(n.h2,{id:"asynchronous-javascript",children:"Asynchronous JavaScript"}),"\n",(0,t.jsx)(n.p,{children:"All of the code that we have written so far has been synchronous. The code at the top of the file will execute before the code at the bottom of the file, and the only thing limiting the speed of execution is the beefiness of your processor."}),"\n",(0,t.jsx)(n.p,{children:"However, there are many instances where this is not the case. If you make a network request, it is going to take time before you get a response. Asynchronous JavaScript allows us to keep our program running while we wait for a response in the background."}),"\n",(0,t.jsx)(n.h3,{id:"promises",children:"Promises"}),"\n",(0,t.jsxs)(n.p,{children:["Any time you call an async function, you are immediately returned a ",(0,t.jsx)(n.code,{children:"promise"}),". JavaScript is ",(0,t.jsx)(n.em,{children:"promising"})," that there will eventually be a result, but it's not ready quite yet. You can keep executing other code until you need the result of your promise, at which point you can ",(0,t.jsx)(n.code,{children:"await"})," it."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Send a request to the pokemon API\nconst promise = fetch("https://pokeapi.co/api/v2/pokemon/pikachu");\n\n// Perform some other calculations in the meantime\nfor (let i = 0; i < 1000; i++) {\n  console.log(i);\n}\n\n// Once you need the response, await it\nconst result = await promise;\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Proper handling of promises can ensure that your program executes as efficiently as possible. In the lecture, we gave the example of a function which gets the total experience of two different pokemon. We can't do add the experience values until both of them have been returned, so we await the responses in parallel using ",(0,t.jsx)(n.code,{children:"Promise.all"}),"."]}),"\n",(0,t.jsxs)(s.A,{children:[(0,t.jsx)(i.A,{value:"parallel (fast)",label:"Parallel (fast)",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Request all of the needed data, then await the results\nconst [pikachuXP, charizardXP] = await Promise.all([\n    getPikachuBaseXP(),\n    getCharizardBaseXP(),\n]);\nconsole.log(pikachuXP + charizardXP);\n"})})}),(0,t.jsx)(i.A,{value:"sequential (slow)",label:"Sequential (slow)",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Don't wait for pikachu's XP to be returned before requesting charizard's XP\nconst pikachuBaseXP = await getPikachuBaseXP();\nconst charizardBaseXP = await getCharizardBaseXP();\nconsole.log(pikachuXP + charizardXP);\n"})})})]}),"\n",(0,t.jsx)(n.h2,{id:"error-handling-and-trycatch",children:"Error Handling and (Try/Catch)"}),"\n",(0,t.jsxs)(n.p,{children:["When you writing synchronous code, you can make it fairly safe from errors and crashing. However, if you are making requests over a network (which most async code is) there can ",(0,t.jsx)(n.strong,{children:"always"})," be unexpected errors since networks are fundamentally unreliable. To make your code more reliable even when it makes network requests, you can wrap it in a try / catch statement. If an error occurs within the try block, the catch block will be executed instead before moving on to the rest of your program."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Handling errors with try catch\ntry {\n  const divisor = 0;\n  const result = 10 / divisor; // Error\n  console.log(result);\n} catch (error) {\n  console.log(error);\n}\n\nconsole.log("I will log no matter what");\n'})}),"\n",(0,t.jsx)(n.h2,{id:"javascript-data-structures",children:"JavaScript Data Structures"}),"\n",(0,t.jsx)(n.h3,{id:"date",children:"Date"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Date"})," object is used to work with dates and times. It can be instantiated from a date string or unix timestamp, or just the current date and time. Once instantiated, it can be used for comparisons, and formatting."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'const now = new Date(); // current date and time\nconst epoch = new Date(1735689600); // January 1, 2025 at 12:00:00 AM at UTC\nconst dateStr = new Date("2025-01-01T00:00:00Z"); // January 1, 2025 at 12:00:00 AM at UTC\n\n// Comparing dates\nconst is2025 = now > epoch; // true\n\n// Getting a formatted Date string\nconst formattedDate = now.toDateString(); // "Sun Sep 19 2021"\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.a,{href:"https://www.w3schools.com/jsref/jsref_obj_date.asp",rel:"nofollow",children:["More available methods",(0,t.jsx)(n.span,{children:(0,t.jsx)(n.span,{className:"glossary-icon",children:" \u2197"})})]})}),"\n",(0,t.jsx)(n.h3,{id:"set",children:"Set"}),"\n",(0,t.jsxs)(n.p,{children:["A set is a collection of items that can check if a value is in the collection in constant time. If you are frequently performing ",(0,t.jsx)(n.code,{children:"array.includes()"})," operations on large arrays, a set will be much faster."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const mySet = new Set(); // create an empty set\nconst setFromArray = new Set([1, 2, 3, 4, 5]); // create a set from an array\n\nmySet.add(1); // add an element to the set\nmySet.includes(1); // true\nmySet.delete(1); // remove an element from the set\n"})}),"\n",(0,t.jsx)(n.h3,{id:"map",children:"Map"}),"\n",(0,t.jsx)(n.p,{children:"A map data structure serves works the same way as an object, but it is better optimized and more performant."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'const myMap = new Map(); // create an empty map\nconst mapFromArray = new Map([\n  ["key1", "value1"],\n  ["key2", "value2"],\n]); // create a map from an array\n\nmyMap.set("key1", "value1"); // add an element to the map\nmyMap.get("key1"); // value1\nmyMap.delete("key1"); // remove an element from the map\nmyMap.has("key1"); // false\n'})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},9365:(e,n,a)=>{a.d(n,{A:()=>i});a(6540);var t=a(4164);const r={tabItem:"tabItem_Ymn6"};var s=a(4848);function i(e){let{children:n,hidden:a,className:i}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,t.A)(r.tabItem,i),hidden:a,children:n})}},1470:(e,n,a)=>{a.d(n,{A:()=>w});var t=a(6540),r=a(4164),s=a(3104),i=a(6347),o=a(205),l=a(7485),c=a(1682),d=a(9466);function u(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:a}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:a,attributes:t,default:r}}=e;return{value:n,label:a,attributes:t,default:r}}))}(a);return function(e){const n=(0,c.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function p(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:a}=e;const r=(0,i.W6)(),s=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,l.aZ)(s),(0,t.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(r.location.search);n.set(s,e),r.replace({...r.location,search:n.toString()})}),[s,r])]}function f(e){const{defaultValue:n,queryString:a=!1,groupId:r}=e,s=h(e),[i,l]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=a.find((e=>e.default))??a[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:s}))),[c,u]=m({queryString:a,groupId:r}),[f,g]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,s]=(0,d.Dv)(a);return[r,(0,t.useCallback)((e=>{a&&s.set(e)}),[a,s])]}({groupId:r}),v=(()=>{const e=c??f;return p({value:e,tabValues:s})?e:null})();(0,o.A)((()=>{v&&l(v)}),[v]);return{selectedValue:i,selectValue:(0,t.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),g(e)}),[u,g,s]),tabValues:s}}var g=a(2303);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=a(4848);function b(e){let{className:n,block:a,selectedValue:t,selectValue:i,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),d=e=>{const n=e.currentTarget,a=l.indexOf(n),r=o[a].value;r!==t&&(c(n),i(r))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const a=l.indexOf(e.currentTarget)+1;n=l[a]??l[0];break}case"ArrowLeft":{const a=l.indexOf(e.currentTarget)-1;n=l[a]??l[l.length-1];break}}n?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":a},n),children:o.map((e=>{let{value:n,label:a,attributes:s}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>l.push(e),onKeyDown:u,onClick:d,...s,className:(0,r.A)("tabs__item",v.tabItem,s?.className,{"tabs__item--active":t===n}),children:a??n},n)}))})}function j(e){let{lazy:n,children:a,selectedValue:r}=e;const s=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===r));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function x(e){const n=f(e);return(0,y.jsxs)("div",{className:(0,r.A)("tabs-container",v.tabList),children:[(0,y.jsx)(b,{...e,...n}),(0,y.jsx)(j,{...e,...n})]})}function w(e){const n=(0,g.A)();return(0,y.jsx)(x,{...e,children:u(e.children)},String(n))}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>o});var t=a(6540);const r={},s=t.createContext(r);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);