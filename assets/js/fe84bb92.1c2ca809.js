"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9509],{7115:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>o,frontMatter:()=>l,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Readings/relational-databases-data-modeling/10.3","title":"10.3 - Relationship Types","description":"One-to-One","source":"@site/docs/Readings/10-relational-databases-data-modeling/10.3.md","sourceDirName":"Readings/10-relational-databases-data-modeling","slug":"/Readings/relational-databases-data-modeling/10.3","permalink":"/docs/Readings/relational-databases-data-modeling/10.3","draft":false,"unlisted":false,"editUrl":"https://github.com/CS61D/website/tree/main/docs/Readings/10-relational-databases-data-modeling/10.3.md","tags":[],"version":"current","frontMatter":{"title":"10.3 - Relationship Types","metadata":["Can be provided",{"as":"objects","or":"arrays"}]},"sidebar":"tutorialSidebar","previous":{"title":"10.2 - Relational Databases","permalink":"/docs/Readings/relational-databases-data-modeling/10.2"},"next":{"title":"Lecture 11 - Basic Database Operations and Validation","permalink":"/docs/Readings/basic-database-operations-validation/"}}');var t=s(4848),i=s(8453);const l={title:"10.3 - Relationship Types",metadata:["Can be provided",{as:"objects",or:"arrays"}]},d=void 0,a={},c=[{value:"One-to-One",id:"one-to-one",level:2},{value:"One-to-Many",id:"one-to-many",level:2},{value:"Many-to-Many",id:"many-to-many",level:2},{value:"Self-Referencing Relationship",id:"self-referencing-relationship",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",hr:"hr",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"one-to-one",children:"One-to-One"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Definition:"})," Each row in Table A is linked to one and only one row in Table B."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Example:"})," A ",(0,t.jsx)(n.code,{children:"User"})," table and a ",(0,t.jsx)(n.code,{children:"UserProfile"})," table, where each user has one profile."]}),"\n"]}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{children:"Deep Dive: One-to-One Relationship Example"}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Users Table:"})}),(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"UserID"}),(0,t.jsx)(n.th,{children:"UserName"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"1"}),(0,t.jsx)(n.td,{children:"Alice"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"2"}),(0,t.jsx)(n.td,{children:"Bob"})]})]})]}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"UserProfiles Table:"})}),(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"ProfileID"}),(0,t.jsx)(n.th,{children:"Bio"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"1"}),(0,t.jsx)(n.td,{children:'"Bio for Alice"'})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"2"}),(0,t.jsx)(n.td,{children:'"Bio for Bob"'})]})]})]}),(0,t.jsxs)(n.p,{children:["Here, ",(0,t.jsx)(n.code,{children:"UserID"})," in the ",(0,t.jsx)(n.code,{children:"UserProfiles"})," table is a foreign key that references ",(0,t.jsx)(n.code,{children:"UserID"})," in the ",(0,t.jsx)(n.code,{children:"Users"})," table, illustrating a one-to-one relationship. One user would only have one unique user ID and one unique profile ID."]})]}),"\n",(0,t.jsx)(n.h2,{id:"one-to-many",children:"One-to-Many"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Definition:"})," A row in Table A can have multiple linked rows in Table B."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Example:"})," A ",(0,t.jsx)(n.code,{children:"Customer"})," table and an ",(0,t.jsx)(n.code,{children:"Orders"})," table, where each customer can have multiple orders."]}),"\n"]}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{children:"Deep Dive: One-to-Many Relationship Example"}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Customers Table:"})}),(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"CustomerID"}),(0,t.jsx)(n.th,{children:"Name"}),(0,t.jsx)(n.th,{children:"Email"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"1"}),(0,t.jsx)(n.td,{children:"John Doe"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"mailto:john@example.com",children:"john@example.com"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"2"}),(0,t.jsx)(n.td,{children:"Jane Smith"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"mailto:jane@example.com",children:"jane@example.com"})})]})]})]}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Orders Table:"})}),(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"OrderID"}),(0,t.jsx)(n.th,{children:"OrderDate"}),(0,t.jsx)(n.th,{children:"CustomerID"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"101"}),(0,t.jsx)(n.td,{children:"2023-07-01"}),(0,t.jsx)(n.td,{children:"1"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"102"}),(0,t.jsx)(n.td,{children:"2023-07-02"}),(0,t.jsx)(n.td,{children:"1"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"103"}),(0,t.jsx)(n.td,{children:"2023-07-03"}),(0,t.jsx)(n.td,{children:"2"})]})]})]}),(0,t.jsxs)(n.p,{children:["Here, ",(0,t.jsx)(n.code,{children:"CustomerID"})," in the ",(0,t.jsx)(n.code,{children:"Orders"})," table is a foreign key that references ",(0,t.jsx)(n.code,{children:"CustomerID"})," in the ",(0,t.jsx)(n.code,{children:"Customers"})," table, illustrating a one-to-many relationship where each customer can have multiple orders."]})]}),"\n",(0,t.jsx)(n.h2,{id:"many-to-many",children:"Many-to-Many"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Definition:"})," Rows in Table A can have multiple links to rows in Table B and vice versa."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Example:"})," A ",(0,t.jsx)(n.code,{children:"Students"})," table and a ",(0,t.jsx)(n.code,{children:"Courses"})," table, where each student can enroll in multiple courses and each course can have multiple students."]}),"\n"]}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{children:"Deep Dive: Many-to-Many Relationship Example"}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Students Table:"})}),(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"StudentID"}),(0,t.jsx)(n.th,{children:"Name"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"1"}),(0,t.jsx)(n.td,{children:"Alice"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"2"}),(0,t.jsx)(n.td,{children:"Bob"})]})]})]}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Courses Table:"})}),(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"CourseID"}),(0,t.jsx)(n.th,{children:"CourseName"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"101"}),(0,t.jsx)(n.td,{children:"Math"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"102"}),(0,t.jsx)(n.td,{children:"Science"})]})]})]}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Enrollments Table (Junction Table):"})}),(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"StudentID"}),(0,t.jsx)(n.th,{children:"CourseID"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"1"}),(0,t.jsx)(n.td,{children:"101"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"1"}),(0,t.jsx)(n.td,{children:"102"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"2"}),(0,t.jsx)(n.td,{children:"101"})]})]})]}),(0,t.jsxs)(n.p,{children:["Here, the ",(0,t.jsx)(n.code,{children:"Enrollments"})," table creates a many-to-many relationship between the ",(0,t.jsx)(n.code,{children:"Students"})," and ",(0,t.jsx)(n.code,{children:"Courses"})," tables. Each student can enroll in multiple courses and each course can have multiple students."]})]}),"\n",(0,t.jsx)(n.h2,{id:"self-referencing-relationship",children:"Self-Referencing Relationship"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Definition:"})," A table has a relationship with itself (aka. Recursive Relationship)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Example:"})," An ",(0,t.jsx)(n.code,{children:"Employees"})," table where each employee can have a manager who is also an employee."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{})]})}function o(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>d});var r=s(6540);const t={},i=r.createContext(t);function l(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);