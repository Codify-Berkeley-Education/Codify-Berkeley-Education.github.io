"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9229],{1649:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Readings/authentication-and-middleware/14.2","title":"14.2 - NextAuth Overview and Session Information","description":"NextAuth","source":"@site/docs/Readings/14-authentication-and-middleware/14.2.md","sourceDirName":"Readings/14-authentication-and-middleware","slug":"/Readings/authentication-and-middleware/14.2","permalink":"/docs/Readings/authentication-and-middleware/14.2","draft":false,"unlisted":false,"editUrl":"https://github.com/CS61D/website/tree/main/docs/Readings/14-authentication-and-middleware/14.2.md","tags":[],"version":"current","frontMatter":{"title":"14.2 - NextAuth Overview and Session Information","metadata":["Can be provided",{"as":"objects","or":"arrays"}]},"sidebar":"tutorialSidebar","previous":{"title":"14.1 - Session Based Authentication and Oauth Providers","permalink":"/docs/Readings/authentication-and-middleware/14.1"},"next":{"title":"14.3 - Defining tRPC Context and Middleware","permalink":"/docs/Readings/authentication-and-middleware/14.3"}}');var i=t(4848),o=t(8453);const r={title:"14.2 - NextAuth Overview and Session Information",metadata:["Can be provided",{as:"objects",or:"arrays"}]},a=void 0,d={},c=[{value:"NextAuth",id:"nextauth",level:2},{value:"Overview",id:"overview",level:3},{value:"Basic Configuration",id:"basic-configuration",level:3},{value:"Using Session Information",id:"using-session-information",level:2},{value:"Accessing Session Data",id:"accessing-session-data",level:3},{value:"Protecting Routes",id:"protecting-routes",level:3}];function l(e){const n={code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"nextauth",children:"NextAuth"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"NextAuth"})," is a popular authentication library for Next.js applications. It provides a flexible and easy-to-use solution for adding authentication to your Next.js app, supporting various authentication providers and session management."]}),"\n",(0,i.jsx)(n.h3,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"NextAuth integrates seamlessly with Next.js and supports various authentication strategies, including email, credentials, OAuth providers (like Google and GitHub), and more. It handles the complexity of managing user sessions and provides simple methods to access and utilize session information."}),"\n",(0,i.jsx)(n.h3,{id:"basic-configuration",children:"Basic Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["Create a ",(0,i.jsx)(n.code,{children:"[...nextauth].ts"})," or ",(0,i.jsx)(n.code,{children:"[...nextauth].js"})," file inside the ",(0,i.jsx)(n.code,{children:"pages/api/auth"})," directory to configure NextAuth. Here\u2019s an example configuration for using Google as an OAuth provider:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// pages/api/auth/[...nextauth].ts\nimport NextAuth from "next-auth";\nimport GoogleProvider from "next-auth/providers/google";\n\nexport default NextAuth({\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n    }),\n  ],\n  // Add any additional configuration options here\n});\n'})}),"\n",(0,i.jsx)(n.p,{children:"In this configuration:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GoogleProvider"}),": Sets up Google as an OAuth provider, using your client ID and secret from Google."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"using-session-information",children:"Using Session Information"}),"\n",(0,i.jsx)(n.p,{children:"Once NextAuth is set up, you can access session information in your application. Here's how you can work with session data:"}),"\n",(0,i.jsx)(n.h3,{id:"accessing-session-data",children:"Accessing Session Data"}),"\n",(0,i.jsxs)(n.p,{children:["Use the ",(0,i.jsx)(n.code,{children:"useSession"})," hook from NextAuth to access session information in your components:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// pages/index.tsx\nimport { useSession, signIn, signOut } from "next-auth/react";\n\nconst HomePage = () => {\n  const { data: session } = useSession();\n\n  if (session) {\n    return (\n      <div>\n        <h1>Welcome, {session.user.name}!</h1>\n        <button onClick={() => signOut()}>Sign Out</button>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <h1>Not signed in</h1>\n      <button onClick={() => signIn()}>Sign In with Google</button>\n    </div>\n  );\n};\n\nexport default HomePage;\n'})}),"\n",(0,i.jsx)(n.p,{children:"In this example:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"useSession"})}),": Retrieves the current session data. If the user is signed in, their name is displayed, and they have the option to sign out. If not signed in, a sign-in button is shown."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"protecting-routes",children:"Protecting Routes"}),"\n",(0,i.jsxs)(n.p,{children:["To protect routes and ensure only authenticated users can access them, use the ",(0,i.jsx)(n.code,{children:"getSession"})," function on the server side:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// pages/protected.tsx\nimport { getSession } from "next-auth/react";\n\nconst ProtectedPage = ({ session }) => {\n  if (!session) {\n    return <div>Access Denied</div>;\n  }\n\n  return <div>Welcome to the protected page, {session.user.name}!</div>;\n};\n\nexport async function getServerSideProps(context) {\n  const session = await getSession(context);\n\n  return {\n    props: {\n      session,\n    },\n  };\n}\n\nexport default ProtectedPage;\n'})}),"\n",(0,i.jsx)(n.p,{children:"In this example:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"getSession"})}),': Retrieves the session data on the server side. If the session does not exist, the page shows an "Access Denied" message. Otherwise, it displays the protected content.']}),"\n"]}),"\n",(0,i.jsx)(n.hr,{})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(6540);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);