"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2207],{9897:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var s=n(4848),r=n(8453);const o={title:"13.2 - Queries and Mutations",metadata:["Can be provided",{as:"objects",or:"arrays"}]},i=void 0,a={id:"Readings/trpc-on-the-server/13.2",title:"13.2 - Queries and Mutations",description:"In tRPC, queries and mutations are two fundamental types of procedures that you'll use to interact with your backend. Both serve distinct purposes, and understanding their roles will help you design a clean, efficient API.",source:"@site/docs/Readings/13-trpc-on-the-server/13.2.md",sourceDirName:"Readings/13-trpc-on-the-server",slug:"/Readings/trpc-on-the-server/13.2",permalink:"/docs/Readings/trpc-on-the-server/13.2",draft:!1,unlisted:!1,editUrl:"https://github.com/CS61D/website/tree/main/docs/Readings/13-trpc-on-the-server/13.2.md",tags:[],version:"current",frontMatter:{title:"13.2 - Queries and Mutations",metadata:["Can be provided",{as:"objects",or:"arrays"}]},sidebar:"tutorialSidebar",previous:{title:"13.1 - Defining Routers and Procedures",permalink:"/docs/Readings/trpc-on-the-server/13.1"},next:{title:"13.3 - Validating Inputs and Throwing Errors",permalink:"/docs/Readings/trpc-on-the-server/13.3"}},c={},d=[{value:"Queries",id:"queries",level:2},{value:"Common Use Cases for Queries",id:"common-use-cases-for-queries",level:3},{value:"Example of a Query",id:"example-of-a-query",level:3},{value:"Mutations",id:"mutations",level:2},{value:"Common Use Cases for Mutations",id:"common-use-cases-for-mutations",level:3},{value:"Example of a Mutation",id:"example-of-a-mutation",level:3}];function u(e){const t={code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["In tRPC, ",(0,s.jsx)(t.strong,{children:"queries"})," and ",(0,s.jsx)(t.strong,{children:"mutations"})," are two fundamental types of procedures that you'll use to interact with your backend. Both serve distinct purposes, and understanding their roles will help you design a clean, efficient API."]}),"\n",(0,s.jsx)(t.h2,{id:"queries",children:"Queries"}),"\n",(0,s.jsx)(t.p,{children:"Queries are used to fetch data from the server without causing any side effects. They are generally idempotent, meaning that no matter how many times you call a query with the same parameters, the result will be the same and no state on the server will change."}),"\n",(0,s.jsx)(t.h3,{id:"common-use-cases-for-queries",children:"Common Use Cases for Queries"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Fetching User Data"}),": Retrieve information about a user, such as their profile details, preferences, or activity logs."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Listing Items"}),": Get a list of items, such as products in an e-commerce store, posts in a blog, or messages in a chat."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Search Operations"}),": Search for items or records based on certain criteria (e.g., search for posts by a keyword)."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"example-of-a-query",children:"Example of a Query"}),"\n",(0,s.jsx)(t.p,{children:"Suppose you need to fetch a list of posts from the database:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"const postRouter = router({\n  getAllPosts: procedure.query(() => {\n    // Logic to fetch all posts from the database\n    return getAllPostsFromDatabase();\n  }),\n\n  getPost: procedure.input(z.object({ id: z.string() })).query(({ input }) => {\n    // Logic to fetch a post by ID\n    return getPostFromDatabase(input.id);\n  }),\n});\n"})}),"\n",(0,s.jsxs)(t.p,{children:["In this ",(0,s.jsx)(t.code,{children:"postRouter"}),", the ",(0,s.jsx)(t.code,{children:"getAllPosts"})," query fetches all the posts, while ",(0,s.jsx)(t.code,{children:"getPost"})," fetches a specific post based on its ID. These queries are perfect examples of how to retrieve data without making changes to the server's state."]}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"mutations",children:"Mutations"}),"\n",(0,s.jsx)(t.p,{children:"Mutations are used to perform operations that change data on the server. They are typically used for creating, updating, or deleting records in your database. Unlike queries, mutations can cause side effects, such as modifying a record or triggering other processes like sending notifications."}),"\n",(0,s.jsx)(t.h3,{id:"common-use-cases-for-mutations",children:"Common Use Cases for Mutations"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Creating New Records"}),": Add new data to the database, like creating a new user account, adding a new post, or submitting a form."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Updating Existing Records"}),": Modify existing data, such as updating user settings, editing a post, or changing the status of an order."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Deleting Records"}),": Remove data from the database, like deleting a comment, removing a user, or canceling an order."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"example-of-a-mutation",children:"Example of a Mutation"}),"\n",(0,s.jsx)(t.p,{children:"Building on our blogging platform example, let\u2019s create a mutation for updating a post:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"const postRouter = router({\n  updatePost: procedure\n    .input(z.object({ id: z.string(), title: z.string(), content: z.string() }))\n    .mutation(({ input }) => {\n      // Logic to update a post's title and content based on its ID\n      return updatePostInDatabase(input.id, input.title, input.content);\n    }),\n\n  deletePost: procedure\n    .input(z.object({ id: z.string() }))\n    .mutation(({ input }) => {\n      // Logic to delete a post by ID\n      return deletePostFromDatabase(input.id);\n    }),\n});\n"})}),"\n",(0,s.jsx)(t.hr,{})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var s=n(6540);const r={},o=s.createContext(r);function i(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);