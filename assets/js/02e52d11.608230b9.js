"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5923],{1152:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"Readings/JavaScript/1.1-basic-syntax","title":"1.1 Basic Syntax","description":"Comments and logging","source":"@site/docs/Readings/1-JavaScript/1.1-basic-syntax.md","sourceDirName":"Readings/1-JavaScript","slug":"/Readings/JavaScript/1.1-basic-syntax","permalink":"/docs/Readings/JavaScript/1.1-basic-syntax","draft":false,"unlisted":false,"editUrl":"https://github.com/CS61D/website/tree/main/docs/Readings/1-JavaScript/1.1-basic-syntax.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Bash","permalink":"/docs/Readings/bash"},"next":{"title":"1.2 Arrays","permalink":"/docs/Readings/JavaScript/1.2-arrays"}}');var a=s(4848),t=s(8453);const o={sidebar_position:1},r="1.1 Basic Syntax",c={},l=[{value:"Comments and logging",id:"comments-and-logging",level:2},{value:"Variables and Primitive Types",id:"variables-and-primitive-types",level:2},{value:"Functions",id:"functions",level:2},{value:"Control Flow",id:"control-flow",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"11-basic-syntax",children:"1.1 Basic Syntax"})}),"\n",(0,a.jsx)(n.h2,{id:"comments-and-logging",children:"Comments and logging"}),"\n",(0,a.jsxs)(n.p,{children:["JavaScript has the same comments syntax as many other languages. You can use ",(0,a.jsx)(n.code,{children:"//"})," for single-line comments and ",(0,a.jsx)(n.code,{children:"/* */"})," for multi-line comments."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// This is a single-line comment\n\n/*\nThis is a \nmulti-line comment\n*/\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The most basic way you can view the output of some code execution is by logging the result to the console. You can do this using the ",(0,a.jsx)(n.code,{children:"console.log()"})," function."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'console.log("Hello, world!");\n'})}),"\n",(0,a.jsx)(n.h2,{id:"variables-and-primitive-types",children:"Variables and Primitive Types"}),"\n",(0,a.jsxs)(n.p,{children:["Mutable variables are declared with the ",(0,a.jsx)(n.code,{children:"let"})," keyword, while immutable variables are declared with the ",(0,a.jsx)(n.code,{children:"const"})," keyword (short for constant)."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'let age = 20;\nage += 1; // Increment by one\n\nconst name = "Alice"; // Immutable\n'})}),"\n",(0,a.jsx)(n.p,{children:"Unlike languages like C, or Java, JavaScript is dynamically typed. This means you can change the type of a variable at any time, however, you should avoid doing this as it can lead to bugs."}),"\n",(0,a.jsx)(n.p,{children:"The main primitive types in JavaScript are:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'const num = 5; // Number\nconst str = "Hello, world!"; // String\nconst bool = true; // Boolean\nconst nullValue = null; // Null\nconst undefinedValue = undefined; // Undefined\n'})}),"\n",(0,a.jsx)(n.p,{children:"Also note that variables and functions in JavaScript are typically written in camelCase."}),"\n",(0,a.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,a.jsxs)(n.p,{children:["Functions can be defined using the ",(0,a.jsx)(n.code,{children:"function"})," keyword."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'// Name is a function parameter\nfunction greet(name) {\n  // This is a template string, which allows you to embed variables in a string\n  return `Hello ${name}`;\n}\n\n// Call the function\nconst greeting = greet("Alice");\nconsole.log(greeting); // Prints "Hello Alice"\n'})}),"\n",(0,a.jsx)(n.p,{children:"However, in many cases you will see functions declared using arrow syntax. This shortened syntax is used most often for inline functions."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const goodbye = (name) => {\n  return `Goodbye ${name}`;\n};\n"})}),"\n",(0,a.jsx)(n.p,{children:"The arrow syntax can be further shortened if the function only has one statement. In this case, the return statement is implicit."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'const goodbye = (name) => `Goodbye ${name}`;\nconsole.log(goodbye("Alice")); // Prints "Goodbye Alice"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"control-flow",children:"Control Flow"}),"\n",(0,a.jsxs)(n.p,{children:["The JavaScript ",(0,a.jsx)(n.code,{children:"or"}),", ",(0,a.jsx)(n.code,{children:"and"}),", and ",(0,a.jsx)(n.code,{children:"not"})," operators are ",(0,a.jsx)(n.code,{children:"||"}),", ",(0,a.jsx)(n.code,{children:"&&"}),", and ",(0,a.jsx)(n.code,{children:"!"}),", respectively. They work much like their counterparts in other languages."]}),"\n",(0,a.jsxs)(n.p,{children:["All values in JavaScript are truthy except for ",(0,a.jsx)(n.code,{children:"false"}),", ",(0,a.jsx)(n.code,{children:"0"}),", ",(0,a.jsx)(n.code,{children:'""'})," (empty string), ",(0,a.jsx)(n.code,{children:"null"}),", ",(0,a.jsx)(n.code,{children:"undefined"}),", and ",(0,a.jsx)(n.code,{children:"NaN"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["When checking for equality or inequality in JavaScript, it is imperative to use ",(0,a.jsx)(n.code,{children:"==="})," and ",(0,a.jsx)(n.code,{children:"!=="})," to ensure that objects must be of the same type to be considered equal. There are almost zero scenarios where you should use ",(0,a.jsx)(n.code,{children:"=="})," or ",(0,a.jsx)(n.code,{children:"!="}),", as they can lead to unexpected behavior."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'const fiveNum = 5;\nconst fiveStr = "5";\n\nif (fiveNum == fiveStr) {\n  console.log("This code will run!");\n}\nif (fiveNum === fiveStr) {\n  console.log("This code will not run!");\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"JavaScript loves to give options for writing code in shorthand. One such shorthand is the ternary operator, which is a one-liner if-else statement. The following two functions are equivalent, but the second is much more concise."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'function saloonGreeting(age) {\n  if (age >= 21) {\n    return "Welcome stranger";\n  } else {\n    return "No youngins allowed";\n  }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"The ternary operator evaluates the condition, and if it is true, it returns the first value, otherwise it returns the second value."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'const saloonGreeting = (age) =>\n  age >= 21 ? "Welcome stranger" : "No youngins allowed";\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>r});var i=s(6540);const a={},t=i.createContext(a);function o(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);