"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8054],{7286:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Readings/trpc-on-the-client/15.2","title":"15.2 - Loading and Error states","description":"When working with tRPC on the client side, handling loading and error states effectively is crucial for providing a smooth user experience. React Query, which tRPC integrates with, provides robust tools to manage these states.","source":"@site/docs/Readings/15-trpc-on-the-client/15.2.md","sourceDirName":"Readings/15-trpc-on-the-client","slug":"/Readings/trpc-on-the-client/15.2","permalink":"/docs/Readings/trpc-on-the-client/15.2","draft":false,"unlisted":false,"editUrl":"https://github.com/CS61D/website/tree/main/docs/Readings/15-trpc-on-the-client/15.2.md","tags":[],"version":"current","frontMatter":{"title":"15.2 - Loading and Error states","metadata":["Can be provided",{"as":"objects","or":"arrays"}]},"sidebar":"tutorialSidebar","previous":{"title":"15.1 - React Query","permalink":"/docs/Readings/trpc-on-the-client/15.1"}}');var i=r(4848),s=r(8453);const o={title:"15.2 - Loading and Error states",metadata:["Can be provided",{as:"objects",or:"arrays"}]},a="15.2 - Loading and Error States",d={},c=[{value:"Handling Loading/Error States",id:"handling-loadingerror-states",level:2},{value:"Example: Handling Loading/Errors with <code>useQuery</code>",id:"example-handling-loadingerrors-with-usequery",level:3}];function l(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"152---loading-and-error-states",children:"15.2 - Loading and Error States"})}),"\n",(0,i.jsx)(n.p,{children:"When working with tRPC on the client side, handling loading and error states effectively is crucial for providing a smooth user experience. React Query, which tRPC integrates with, provides robust tools to manage these states."}),"\n",(0,i.jsx)(n.h2,{id:"handling-loadingerror-states",children:"Handling Loading/Error States"}),"\n",(0,i.jsxs)(n.p,{children:["In tRPC, loading states indicate that data is being fetched or a mutation is in progress. React Query\u2019s hooks provide a ",(0,i.jsx)(n.code,{children:"isLoading"})," or ",(0,i.jsx)(n.code,{children:"isFetching"})," state to help you manage this."]}),"\n",(0,i.jsxs)(n.p,{children:["Error handling is crucial for providing feedback and handling cases where something goes wrong. React Query\u2019s hooks provide a ",(0,i.jsx)(n.code,{children:"isError"})," state to help you manage this."]}),"\n",(0,i.jsxs)(n.h3,{id:"example-handling-loadingerrors-with-usequery",children:["Example: Handling Loading/Errors with ",(0,i.jsx)(n.code,{children:"useQuery"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// src/components/UserProfile.tsx\nimport { trpc } from "../utils/trpc";\n\nconst UserProfile = ({ id }: { id: string }) => {\n  const {\n    data: user,\n    isLoading,\n    isError,\n    error,\n  } = trpc.user.getUser.useQuery(id);\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  if (isError) {\n    return <div>Error: {error.message}</div>;\n  }\n\n  return (\n    <div>\n      <h1>{user?.name}</h1>\n      <p>{user?.email}</p>\n    </div>\n  );\n};\n\nexport default UserProfile;\n'})}),"\n",(0,i.jsx)(n.p,{children:"In this example:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"isLoading"})," is true while the query is fetching data, and you can show a loading indicator."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"isError"})," is true if an error occurred during the query."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"error.message"})," provides the error message which you can display to the user."]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["For mutations, React Query provides similar hooks and states to manage loading and error conditions with ",(0,i.jsx)(n.code,{children:"useMutation"}),"."]})}),"\n",(0,i.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var t=r(6540);const i={},s=t.createContext(i);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);