"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3781],{2486:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>r,toc:()=>d});var i=n(4848),s=n(8453);const a={title:"4.4 - Type Safe React",metadata:["Can be provided",{as:"objects",or:"arrays"}]},o=void 0,r={id:"Readings/basic-react/4.4",title:"4.4 - Type Safe React",description:"TypeScript is a popular way to add type definitions to JavaScript codebases!",source:"@site/docs/Readings/4-basic-react/4.4.md",sourceDirName:"Readings/4-basic-react",slug:"/Readings/basic-react/4.4",permalink:"/docs/Readings/basic-react/4.4",draft:!1,unlisted:!1,editUrl:"https://github.com/CS61D/website/tree/main/docs/Readings/4-basic-react/4.4.md",tags:[],version:"current",frontMatter:{title:"4.4 - Type Safe React",metadata:["Can be provided",{as:"objects",or:"arrays"}]},sidebar:"tutorialSidebar",previous:{title:"4.3 - Using JavaScript Within React",permalink:"/docs/Readings/basic-react/4.3"},next:{title:"4.5 - Passing Props",permalink:"/docs/Readings/basic-react/4.5"}},c={},d=[];function p(e){const t={admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"TypeScript is a popular way to add type definitions to JavaScript codebases!\nWriting TypeScript with React is very similar to writing JavaScript with React."}),"\n",(0,i.jsx)(t.p,{children:"The key difference when working with a component is that you can provide types for your component\u2019s props. These types can be used for correctness checking and providing inline documentation in editors."}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsxs)(t.p,{children:["Every file containing JSX must use the ",(0,i.jsx)(t.code,{children:".tsx"})," file extension. This is a TypeScript-specific extension that tells TypeScript that this file contains JSX."]})}),"\n",(0,i.jsx)(t.p,{children:"For example, we can add a type describing the title in the MyButton component."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"function MyButton({ title }: { title: string }) {\n  return <button>{title}</button>;\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"This inline syntax is the simplest way to provide types for a component, though once you start to have a few fields to describe it can become unwieldy. Instead, you can use an interface or type to describe the component\u2019s props:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"interface MyButtonProps {\n  /** The text to display inside the button */\n  title: string;\n  /** Whether the button can be interacted with */\n  disabled: boolean;\n}\n\nfunction MyButton({ title, disabled }: MyButtonProps) {\n  return <button disabled={disabled}>{title}</button>;\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The type describing your component\u2019s props can be as simple or as complex as you need, though they should be an object type described with either a ",(0,i.jsx)(t.code,{children:"type"})," or ",(0,i.jsx)(t.code,{children:"interface"}),"."]})]})}function l(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var i=n(6540);const s={},a=i.createContext(s);function o(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);