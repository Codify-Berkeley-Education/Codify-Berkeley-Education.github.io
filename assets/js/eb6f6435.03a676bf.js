"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9076],{8348:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"Readings/trpc-on-the-server/13.1","title":"13.1 - Defining Routers and Procedures","description":"What is the Backend?","source":"@site/docs/Readings/13-trpc-on-the-server/13.1.md","sourceDirName":"Readings/13-trpc-on-the-server","slug":"/Readings/trpc-on-the-server/13.1","permalink":"/docs/Readings/trpc-on-the-server/13.1","draft":false,"unlisted":false,"editUrl":"https://github.com/CS61D/website/tree/main/docs/Readings/13-trpc-on-the-server/13.1.md","tags":[],"version":"current","frontMatter":{"title":"13.1 - Defining Routers and Procedures","metadata":["Can be provided",{"as":"objects","or":"arrays"}]},"sidebar":"tutorialSidebar","previous":{"title":"Lecture 13 - tRPC on the Server","permalink":"/docs/Readings/trpc-on-the-server/"},"next":{"title":"13.2 - Queries and Mutations","permalink":"/docs/Readings/trpc-on-the-server/13.2"}}');var s=r(4848),i=r(8453);const o={title:"13.1 - Defining Routers and Procedures",metadata:["Can be provided",{as:"objects",or:"arrays"}]},a="13.1 - Defining Routers and Procedures",d={},l=[{value:"What is the Backend?",id:"what-is-the-backend",level:2},{value:"Key Components of the Backend",id:"key-components-of-the-backend",level:3},{value:"How Does the Backend Work?",id:"how-does-the-backend-work",level:3},{value:"Real-World Example: A Social Media App",id:"real-world-example-a-social-media-app",level:3},{value:"Preparing to Learn tRPC",id:"preparing-to-learn-trpc",level:3},{value:"Introduction to tRPC",id:"introduction-to-trpc",level:2},{value:"Overview",id:"overview",level:3},{value:"How it Works",id:"how-it-works",level:3},{value:"Features",id:"features",level:3},{value:"Defining Routers and Procedures",id:"defining-routers-and-procedures",level:2},{value:"Routers",id:"routers",level:3},{value:"Example of a Router",id:"example-of-a-router",level:4},{value:"Procedures",id:"procedures",level:3},{value:"Types of Procedures",id:"types-of-procedures",level:4},{value:"Example of Procedures",id:"example-of-procedures",level:4}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"131---defining-routers-and-procedures",children:"13.1 - Defining Routers and Procedures"})}),"\n",(0,s.jsx)(n.h2,{id:"what-is-the-backend",children:"What is the Backend?"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"backend"})," refers to the part of a software application that runs on the server, hidden from the user's view. It handles the business logic, database operations, and communication with other systems, ensuring the application functions as intended. While the frontend is what users interact with directly (like buttons, forms, and pages), the backend is the engine that powers everything behind the scenes."]}),"\n",(0,s.jsx)(n.h3,{id:"key-components-of-the-backend",children:"Key Components of the Backend"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Server"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A server is a computer or a system that provides resources, data, services, or programs to other computers, known as clients, over a network."}),"\n",(0,s.jsx)(n.li,{children:"In the context of a web application, the server hosts the backend logic and serves content to users via the internet."}),"\n",(0,s.jsx)(n.li,{children:"Common server types include web servers (like Apache or Nginx) and application servers (like Node.js or Django)."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Database"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A database is a system that stores and manages data. It's where the application's information, like user accounts, posts, and comments, is kept."}),"\n",(0,s.jsx)(n.li,{children:"The backend interacts with the database to retrieve, store, update, or delete data as requested by the client."}),"\n",(0,s.jsx)(n.li,{children:"Examples of databases include relational databases like MySQL and PostgreSQL, or NoSQL databases like MongoDB."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"API (Application Programming Interface)"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"An API is a set of rules and definitions that allows one piece of software to communicate with another."}),"\n",(0,s.jsx)(n.li,{children:"In the context of the backend, an API allows the frontend (like a web page or mobile app) to interact with the server. For example, when you submit a form on a website, the data is sent to the server via an API."}),"\n",(0,s.jsx)(n.li,{children:"APIs can be designed in various ways, such as REST, GraphQL, or tRPC, each with its own structure and use cases."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"how-does-the-backend-work",children:"How Does the Backend Work?"}),"\n",(0,s.jsx)(n.p,{children:"When a user interacts with an application, several things happen in the backend:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"User Request"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A user makes a request from the frontend, such as clicking a button to view their profile. This request is sent to the backend server through an API."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Processing the Request"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The server receives the request and processes it. This may involve:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Business Logic"}),": The server applies the rules of the application (e.g., checking if the user is authorized to view certain content)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Database Interaction"}),": If the request requires data (e.g., retrieving user details), the server queries the database."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Generating a Response"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Once the request is processed, the server generates a response. This could be data (like user details) or a confirmation that an action was completed (like updating a profile)."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Sending the Response"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The server sends the response back to the frontend via the API. The frontend then displays the data or confirms the action to the user."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"real-world-example-a-social-media-app",children:"Real-World Example: A Social Media App"}),"\n",(0,s.jsx)(n.p,{children:"Consider a social media app where users can post updates, comment on posts, and like content. Here\u2019s how the backend might work:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Posting an Update"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Request"}),': The user writes a post and hits "Submit." The frontend sends the post data to the server.']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Processing"}),": The server checks if the user is logged in, then stores the post in the database."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Response"}),": The server confirms that the post was successfully saved and sends this confirmation to the frontend."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Viewing a Profile"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Request"}),": A user clicks on another user's profile. The frontend sends a request to the server to get the profile information."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Processing"}),": The server retrieves the profile data from the database."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Response"}),": The server sends the profile data back to the frontend, which displays it to the user."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"preparing-to-learn-trpc",children:"Preparing to Learn tRPC"}),"\n",(0,s.jsx)(n.p,{children:"Understanding these backend fundamentals sets the stage for learning more advanced topics like tRPC. With tRPC, you can build a type-safe API where the frontend and backend communicate seamlessly without the need for manual API client generation. In the next sections, we'll dive into how to define routes and procedures in tRPC, and how to leverage its powerful features to build robust, scalable applications."}),"\n",(0,s.jsx)(n.h2,{id:"introduction-to-trpc",children:"Introduction to tRPC"}),"\n",(0,s.jsx)(n.h3,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"tRPC (TypeScript Remote Procedure Call) is a framework that enables building end-to-end type-safe APIs using TypeScript. It allows you to define your API contract using TypeScript types and provides type inference across the client and server. The main goal of tRPC is to eliminate the need for manual API client generation and ensure type safety throughout the development process."}),"\n",(0,s.jsx)(n.h3,{id:"how-it-works",children:"How it Works"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Define Procedures on the Server"}),": Use TypeScript to define API endpoints (procedures) for queries and mutations."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Generate Type-Safe Client"}),": tRPC generates a type-safe client that you can use in your frontend code."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Invoke Procedures from the Client"}),": Call the server-side procedures from the client with full type safety and autocompletion."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"features",children:"Features"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type Safety"}),": Automatically infers types from your server to your client, reducing the risk of runtime errors."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"No Schema Definitions"}),": Unlike GraphQL or REST, tRPC does not require separate schema definitions. It uses TypeScript types directly."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Flexible and Lightweight"}),": Provides a simple API to define and use procedures, making it easy to integrate with existing projects."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Middleware Support"}),": Allows for adding middleware for authentication, authorization, logging, etc."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"defining-routers-and-procedures",children:"Defining Routers and Procedures"}),"\n",(0,s.jsxs)(n.p,{children:["In tRPC, the two fundamental concepts you'll work with on the server are ",(0,s.jsx)(n.strong,{children:"routers"})," and ",(0,s.jsx)(n.strong,{children:"procedures"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"routers",children:"Routers"}),"\n",(0,s.jsx)(n.p,{children:"A router in tRPC is a way to group related API procedures, much like a controller in traditional MVC (Model-View-Controller) frameworks. Routers help you organize your API endpoints logically, making your codebase easier to maintain."}),"\n",(0,s.jsx)(n.h4,{id:"example-of-a-router",children:"Example of a Router"}),"\n",(0,s.jsx)(n.p,{children:"Imagine you're building an API for a blogging platform. You might have different routers for handling users, posts, and comments. Here's a basic example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { router } from "@trpc/server";\nimport { z } from "zod"; // for input validation\n\nconst userRouter = router({\n  getUser: procedure.input(z.object({ id: z.string() })).query(({ input }) => {\n    // Logic to fetch user by ID\n    return getUserFromDatabase(input.id);\n  }),\n\n  createUser: procedure\n    .input(z.object({ name: z.string(), email: z.string() }))\n    .mutation(({ input }) => {\n      // Logic to create a new user\n      return createUserInDatabase(input);\n    }),\n});\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In this example, the ",(0,s.jsx)(n.code,{children:"userRouter"})," contains two procedures: ",(0,s.jsx)(n.code,{children:"getUser"})," and ",(0,s.jsx)(n.code,{children:"createUser"}),". These procedures are defined using tRPC's ",(0,s.jsx)(n.code,{children:"procedure"})," method, and each procedure can have its own input and output types."]}),"\n",(0,s.jsx)(n.h3,{id:"procedures",children:"Procedures"}),"\n",(0,s.jsx)(n.p,{children:"Procedures are the actual endpoints in your API. They represent a specific piece of functionality that your frontend can call, like fetching data or creating a new resource. Procedures in tRPC are type-safe, meaning the input and output are strongly typed."}),"\n",(0,s.jsx)(n.h4,{id:"types-of-procedures",children:"Types of Procedures"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Queries"}),": Used for fetching data without causing side effects. For example, getting a user's profile or retrieving a list of posts."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Mutations"}),": Used for operations that modify data on the server. For example, creating a new post, updating user information, or deleting a comment."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"example-of-procedures",children:"Example of Procedures"}),"\n",(0,s.jsx)(n.p,{children:"Continuing with the blogging platform example, let's add some procedures to handle posts:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const postRouter = router({\n  getPost: procedure.input(z.object({ id: z.string() })).query(({ input }) => {\n    // Logic to fetch a post by ID\n    return getPostFromDatabase(input.id);\n  }),\n\n  createPost: procedure\n    .input(z.object({ title: z.string(), content: z.string() }))\n    .mutation(({ input }) => {\n      // Logic to create a new post\n      return createPostInDatabase(input);\n    }),\n});\n"})}),"\n",(0,s.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var t=r(6540);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);