"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3318],{3886:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>h});var a=t(4848),r=t(8453),s=t(1470),i=t(9365);const o={sidebar_position:0},l="Bash",c={id:"Readings/bash",title:"Bash",description:"A Shell, such as Bash (Bourne-Again SHell), or zsh (Z-shell) allows you to interact with your operating system through a command line. Command line interfaces (CLIs) often allow for enhanced productivity compared to graphical user interfaces (GUIs) for many tasks, as interacting via a keyboard is quicker than with a mouse. Shell commands are also scriptable, meaning you can more easily automate tasks and encode repeatable operation.",source:"@site/docs/Readings/bash.mdx",sourceDirName:"Readings",slug:"/Readings/bash",permalink:"/docs/Readings/bash",draft:!1,unlisted:!1,editUrl:"https://github.com/CS61D/website/tree/main/docs/Readings/bash.mdx",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"0.3-environment-variables",permalink:"/docs/Readings/Fundamentals/0.3-environment-variables"},next:{title:"1.1 Basic Syntax",permalink:"/docs/Readings/JavaScript/1.1-basic-syntax"}},d={},h=[{value:"Why use a command line interface? (CLI)",id:"why-use-a-command-line-interface-cli",level:2},{value:"CLI Command structure",id:"cli-command-structure",level:2},{value:"Setting Up Aliases",id:"setting-up-aliases",level:2},{value:"Basic Scripting Example",id:"basic-scripting-example",level:2},{value:"Bash Quick Reference",id:"bash-quick-reference",level:2},{value:"pwd - Print working directory",id:"pwd---print-working-directory",level:3},{value:"ls - List current directory contents",id:"ls---list-current-directory-contents",level:3},{value:"cd - Change directory",id:"cd---change-directory",level:3},{value:"touch - Create an empty file",id:"touch---create-an-empty-file",level:3},{value:"mkdir - Create a new directory",id:"mkdir---create-a-new-directory",level:3},{value:"mv - Move or rename a file",id:"mv---move-or-rename-a-file",level:3},{value:"cp - Copy a file",id:"cp---copy-a-file",level:3},{value:"rm - Remove a file or directory",id:"rm---remove-a-file-or-directory",level:3},{value:"echo - Print text to console",id:"echo---print-text-to-console",level:3},{value:"cat - Print files to standard output",id:"cat---print-files-to-standard-output",level:3},{value:"history - Show command history",id:"history---show-command-history",level:3},{value:"tree - Show directory structure",id:"tree---show-directory-structure",level:3},{value:"alias - Create a shortcut for a command",id:"alias---create-a-shortcut-for-a-command",level:3},{value:"clear - Clear the terminal screen",id:"clear---clear-the-terminal-screen",level:3},{value:"curl - Make a network request from the command line",id:"curl---make-a-network-request-from-the-command-line",level:3}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",span:"span",strong:"strong",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"bash",children:"Bash"}),"\n",(0,a.jsxs)(n.p,{children:["A ",(0,a.jsx)(n.strong,{children:"Shell"}),", such as Bash (Bourne-Again SHell), or zsh (Z-shell) allows you to interact with your operating system through a command line. Command line interfaces (CLIs) often allow for enhanced productivity compared to graphical user interfaces (GUIs) for many tasks, as interacting via a keyboard is quicker than with a mouse. Shell commands are also scriptable, meaning you can more easily automate tasks and encode repeatable operation."]}),"\n",(0,a.jsx)(n.p,{children:"Shell commands are inputted via a terminal application. In the same way there are many different programming languages which can be mixed and matched with many different text editors, there are many different shells and terminal applications. We teach the very basics of bash in 61d because it is the most widely used shell and is the default shell on most linux distributions."}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["Bash and zsh are different, but their difference largely lie in how they are configured, not their actual command syntax. For clarity, we will just use the work ",(0,a.jsx)(n.code,{children:"bash"}),", but know that everything we cover and discuss about bash applies to zsh as well."]})}),"\n",(0,a.jsx)(n.h2,{id:"why-use-a-command-line-interface-cli",children:"Why use a command line interface? (CLI)"}),"\n",(0,a.jsx)(n.p,{children:"Most people have been using GUIs (websites, mobile apps, desktop apps) for their entire life and are generally familiar with how to navigate them. The initial learning curve of getting familiar with CLIs often discourages junior developers from relying on them, but even if you don't become a CLI power user, basic familiarity and competency with CLI tools is a necessity for the following core reasons."}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Efficiency"}),": A website like Amazon Web Services has thousands if not tens of thousands of menus and pages to display all of the possible actions you can take. It could take 5-7 clicks and page reloads to get where you need to go (assuming you get there first try), or you could just run a command through your terminal using the AWS CLI."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:'As an example, this one command uses the GitHub CLI to create a private github repository titled "my-repo" with a .gitignore file and a README.md file, and clones it locally. Doing the equivalent from the github.com home page would take a minimum of 5 click and two page reloads not including filling in the repository information.'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'gh repo create my-repo --add-readme --clone --description "test repo from command line" --gitignore Node --private\n'})}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Scripting and Repeatability"}),": If you need to document how to perform some action on your AWS instance, it is much simpler to just write down a CLI command than write down which sequence of menus you need to navigate through (which may change over time of course). Further, if you need to run a series of commands to properly configure or set up something within AWS, writing them down in a script ensures that the exact same configuration is generated each time. Running a script is more deterministic and repeatable than a human manually clicking through menus."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Remote Access"}),": A web server running your code in a data center somewhere does not have a monitor attached to it. The only practical way to interact with remote servers is through command line tools."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"All of the general reasons why one would want to use a CLI are the same reasons that it makes sense to learn bash, which is essentially just a CLI for you operating system. It is generally quicker to make, move, and manage files through a command line than a file explorer."}),"\n",(0,a.jsx)(n.h2,{id:"cli-command-structure",children:"CLI Command structure"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mv -i file1.txt docs/file1.txt\n"})}),"\n",(0,a.jsx)(n.p,{children:"A typical command has three parts"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["The command itself (e.g. ",(0,a.jsx)(n.code,{children:"git"}),", ",(0,a.jsx)(n.code,{children:"docker"}),", ",(0,a.jsx)(n.code,{children:"ls"}),", ",(0,a.jsx)(n.code,{children:"mv"}),"). This says what program or utility you want to run."]}),"\n",(0,a.jsxs)(n.li,{children:["Arguments (",(0,a.jsx)(n.code,{children:"file1.txt1"})," and ",(0,a.jsx)(n.code,{children:"docs/file1.txt"})," in our example). These are the inputs to the command, and their order is important for the command execution. In this case, the first argument is the source file location, and the second argument is the destination file."]}),"\n",(0,a.jsxs)(n.li,{children:["Options/Flags (",(0,a.jsx)(n.code,{children:"-i"})," in our example). These modify the behavior of the command and typically do not have to be passed in any particular order. They are usually preceded by a ",(0,a.jsx)(n.code,{children:"-"})," or ",(0,a.jsx)(n.code,{children:"--"}),". In this case, the ",(0,a.jsx)(n.code,{children:"-i"})," flag tells ",(0,a.jsx)(n.code,{children:"mv"})," to prompt the user before overwriting a file."]}),"\n"]}),"\n",(0,a.jsxs)(n.admonition,{type:"important",children:[(0,a.jsxs)(n.p,{children:["Most of the time, CLI interfaces have tools for explaining what options are available, either by pressing ",(0,a.jsx)(n.strong,{children:"tab \u21b9"})," to list autocomplete options, or through a flag like --help."]}),(0,a.jsx)(n.p,{children:"If you forget what git command options are available to you, run:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git --help\n"})})]}),"\n",(0,a.jsx)(n.h2,{id:"setting-up-aliases",children:"Setting Up Aliases"}),"\n",(0,a.jsxs)(n.p,{children:["Long commands can be cumbersome to remember and type out every single time, especially if you run them dozens of times a day. Fortunately, you can ",(0,a.jsx)(n.code,{children:"alias"})," a command to a shorter name. For example, you can alias ",(0,a.jsx)(n.code,{children:"git status"})," to ",(0,a.jsx)(n.code,{children:"gs"})," by updating either your ",(0,a.jsx)(n.code,{children:".bashrc"})," or ",(0,a.jsx)(n.code,{children:".zshrc"})," file on windows or MacOS respectively."]}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsx)(i.A,{value:"windows",label:"Windows/bash",default:!0,children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cd ~ # Go to home directory\ntouch .bashrc # Create .bashrc file if it doesn't exist\ncode .bashrc # Open .bashrc in vscode\n"})})}),(0,a.jsx)(i.A,{value:"mac",label:"Mac/zsh",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cd ~ # Go to home directory\ntouch .zshrc # Create .zshrc file if it doesn't exist\ncode .zshrc # Open .zshrc in vscode\n"})})})]}),"\n",(0,a.jsx)(n.p,{children:"Then add an alias like so:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"alias gs='git status'\n"})}),"\n",(0,a.jsxs)(n.p,{children:["After adding an alias to the file, you will need to restart your terminal or run ",(0,a.jsx)(n.code,{children:"source ~/.bashrc"})," or ",(0,a.jsx)(n.code,{children:"source ~/.zshrc"})," to apply the changes. You should nwo be able to use your alias in the terminal."]}),"\n",(0,a.jsx)(n.h2,{id:"basic-scripting-example",children:"Basic Scripting Example"}),"\n",(0,a.jsx)(n.p,{children:"In addition to being a CLI interface for your operating system, bash is a programming language that can be used to write scripts."}),"\n",(0,a.jsxs)(n.p,{children:["The simplest way to create a script is to add if to your ",(0,a.jsx)(n.code,{children:".bashrc"})," or ",(0,a.jsx)(n.code,{children:".zshrc"}),". Let's look at an example script which adds a line to a package.json file (the use of which we will cover once we talk about React) using the ",(0,a.jsxs)(n.a,{href:"https://jqlang.github.io/jq/",rel:"nofollow",children:["jq",(0,a.jsx)(n.span,{children:(0,a.jsx)(n.span,{className:"glossary-icon",children:" \u2197"})})]})," command line utility."]}),"\n","\n",(0,a.jsxs)(s.A,{children:[(0,a.jsx)(i.A,{value:"windows",label:"Windows/bash",default:!0,children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"choco install jq\n"})})}),(0,a.jsx)(i.A,{value:"mac",label:"Mac/zsh",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"brew install jq\n"})})})]}),"\n",(0,a.jsx)(n.p,{children:"Verify your install"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"jq --help\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Then add the following script to your ",(0,a.jsx)(n.code,{children:".bashrc"})," or ",(0,a.jsx)(n.code,{children:".zshrc"})," and run ",(0,a.jsx)(n.code,{children:"source ~/.bashrc"})," or ",(0,a.jsx)(n.code,{children:"source ~/.zshrc"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Add package json script\npjs() {\n  # Check that there are two arguments passed\n  if [ "$#" -ne 2 ]; then\n    echo "Usage: add_script_to_package_json <script_name> <script_body>"\n    return 1\n  fi\n\n  SCRIPT_NAME=$1\n  SCRIPT_BODY=$2\n\n  # Check that there is a package.json file\n  if [ ! -f package.json ]; then\n    echo "Error: package.json not found in the current directory."\n    return 1\n  fi\n\n  # Copy the contents of the existing package.json and the new script to a temp file\n  jq ".scripts[\\"$SCRIPT_NAME\\"] = \\"$SCRIPT_BODY\\"" package.json > temp.json\n\n  # Replace existing package.json with the temp file\n  mv temp.json package.json\n\n  # Log a that the operation was successful\n  echo "Script \'$SCRIPT_NAME\' added to package.json successfully."\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Sometimes you may have a script which you will only use on a specific project. In this case, we can create a specific file just for our one script and make it executable, instead of storing it in a ",(0,a.jsx)(n.code,{children:".bashrc"})," or ",(0,a.jsx)(n.code,{children:".zshrc"})," file."]}),"\n","\n","\n",(0,a.jsx)(n.h2,{id:"bash-quick-reference",children:"Bash Quick Reference"}),"\n",(0,a.jsx)(n.h3,{id:"pwd---print-working-directory",children:"pwd - Print working directory"}),"\n",(0,a.jsx)(n.p,{children:"Shows you where you are in the file system."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pwd\n"})}),"\n",(0,a.jsx)(n.h3,{id:"ls---list-current-directory-contents",children:"ls - List current directory contents"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"ls\nls -a # List all files including hidden files and dot files like .gitignore\n"})}),"\n",(0,a.jsx)(n.h3,{id:"cd---change-directory",children:"cd - Change directory"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cd path/to/directory\ncd .. # Move up one directory\ncd ../../ # Move up two directories\ncd - # Move to the previous directory\ncd ~ # Move to the home directory\n"})}),"\n",(0,a.jsx)(n.h3,{id:"touch---create-an-empty-file",children:"touch - Create an empty file"}),"\n",(0,a.jsxs)(n.p,{children:["If the file already exists, ",(0,a.jsx)(n.code,{children:"touch"})," will not modify the file's contents."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"touch newfile.txt # Create a new file\ntouch file1.txt file2.txt # Create multiple files\n"})}),"\n",(0,a.jsx)(n.h3,{id:"mkdir---create-a-new-directory",children:"mkdir - Create a new directory"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mkdir newdir # Create a new directory\nmkdir -p path/to/newdir # Create a new directory and any necessary parent directories\n"})}),"\n",(0,a.jsx)(n.h3,{id:"mv---move-or-rename-a-file",children:"mv - Move or rename a file"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mv oldname.txt newname.txt # Rename a file\nmv myfile.txt newdir/mytextfile.txt # Move a file\n"})}),"\n",(0,a.jsx)(n.h3,{id:"cp---copy-a-file",children:"cp - Copy a file"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cp myfile.txt newdir/ # Copy a file to a new directory\ncp -r mydir newdir/ # Copy a directory to a new directory\n"})}),"\n",(0,a.jsx)(n.h3,{id:"rm---remove-a-file-or-directory",children:"rm - Remove a file or directory"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"rm myfile.txt # Remove a file\nrm -rf mydir # Remove a directory and all its contents\n"})}),"\n",(0,a.jsx)(n.h3,{id:"echo---print-text-to-console",children:"echo - Print text to console"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'echo "Hello, World!"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"cat---print-files-to-standard-output",children:"cat - Print files to standard output"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cat myfile.txt # Print the contents\n"})}),"\n",(0,a.jsx)(n.h3,{id:"history---show-command-history",children:"history - Show command history"}),"\n",(0,a.jsxs)(n.p,{children:["Most of the time, you want to search through your command history to find a command you ran earlier. A more useful way to do this is often to use ",(0,a.jsx)(n.code,{children:"Ctrl + R"})," to search through your history, rather than just printing the entire history."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"history # print full history to standard output\nhistory | tail -n 10 # Show the last 10 commands\n"})}),"\n",(0,a.jsx)(n.h3,{id:"tree---show-directory-structure",children:"tree - Show directory structure"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'tree\ntree -L 2 # Show the directory structure to a depth of 2\ntree -L 2 -I "node_modules" "build" # Show the directory structure to a depth of 2, ignoring node_modules and build directories\ntree --gitignore # Automatically ignore all files ignored by git based on a .gitignore file\n'})}),"\n",(0,a.jsx)(n.h3,{id:"alias---create-a-shortcut-for-a-command",children:"alias - Create a shortcut for a command"}),"\n",(0,a.jsxs)(n.p,{children:["Running the alias command will only create the alias for the current terminal session. To make it accessible in every session, add the alias to your ",(0,a.jsx)(n.code,{children:".bashrc"})," or ",(0,a.jsx)(n.code,{children:".zshrc"})," file as explained in ",(0,a.jsx)(n.a,{href:"#setting-up-aliases",children:"Setting up aliases"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"alias gs='git status'\n"})}),"\n",(0,a.jsxs)(n.p,{children:["You can also use the ",(0,a.jsx)(n.code,{children:"which"})," command to see what a command is aliased to or run ",(0,a.jsx)(n.code,{children:"alias"})," without any arguments to print all of your aliases."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"which gs # gs: aliased to git status\nalias # print all aliases in current terminal session\n"})}),"\n",(0,a.jsx)(n.h3,{id:"clear---clear-the-terminal-screen",children:"clear - Clear the terminal screen"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"clear\n"})}),"\n",(0,a.jsx)(n.h3,{id:"curl---make-a-network-request-from-the-command-line",children:"curl - Make a network request from the command line"}),"\n",(0,a.jsx)(n.p,{children:"Curl supports all major options one would need to make network requests. The basic usage is to provide a URL to make a GET request."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Gets the contents of the page you are viewing right now and prints it to the console\ncurl https://raw.githubusercontent.com/CS61D/website/main/docs/Readings/bash.mdx\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Often times api documentation will show how their api can be called directly through a curl request. In this example, we can call the GitHub api to list the ",(0,a.jsxs)(n.a,{href:"https://docs.github.com/en/rest/issues/issues?apiVersion=2022-11-28#list-repository-issues",rel:"nofollow",children:["issues for a repository",(0,a.jsx)(n.span,{children:(0,a.jsx)(n.img,{src:"/img/link-icons/github.svg",alt:"github",className:"github-icon",style:{width:"16px",height:"16px",marginLeft:"0.25rem",verticalAlign:"baseline"}})})]}),". In this example, we include request headers which specify the API version and the response type as json."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'curl -L \\\n  -H "Accept: application/vnd.github+json" \\\n  -H "X-GitHub-Api-Version: 2022-11-28" \\\n  https://api.github.com/repos/CS61D/website/issues # 61d website\n'})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},9365:(e,n,t)=>{t.d(n,{A:()=>i});t(6540);var a=t(4164);const r={tabItem:"tabItem_Ymn6"};var s=t(4848);function i(e){let{children:n,hidden:t,className:i}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,a.A)(r.tabItem,i),hidden:t,children:n})}},1470:(e,n,t)=>{t.d(n,{A:()=>v});var a=t(6540),r=t(4164),s=t(3104),i=t(6347),o=t(205),l=t(7485),c=t(1682),d=t(9466);function h(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}(t);return function(e){const n=(0,c.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:t}=e;const r=(0,i.W6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(s),(0,a.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(r.location.search);n.set(s,e),r.replace({...r.location,search:n.toString()})}),[s,r])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,s=u(e),[i,l]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:s}))),[c,h]=p({queryString:t,groupId:r}),[g,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,s]=(0,d.Dv)(t);return[r,(0,a.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:r}),y=(()=>{const e=c??g;return m({value:e,tabValues:s})?e:null})();(0,o.A)((()=>{y&&l(y)}),[y]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),f(e)}),[h,f,s]),tabValues:s}}var f=t(2303);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=t(4848);function j(e){let{className:n,block:t,selectedValue:a,selectValue:i,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),d=e=>{const n=e.currentTarget,t=l.indexOf(n),r=o[t].value;r!==a&&(c(n),i(r))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>l.push(e),onKeyDown:h,onClick:d,...s,className:(0,r.A)("tabs__item",y.tabItem,s?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function b(e){let{lazy:n,children:t,selectedValue:r}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function w(e){const n=g(e);return(0,x.jsxs)("div",{className:(0,r.A)("tabs-container",y.tabList),children:[(0,x.jsx)(j,{...e,...n}),(0,x.jsx)(b,{...e,...n})]})}function v(e){const n=(0,f.A)();return(0,x.jsx)(w,{...e,children:h(e.children)},String(n))}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(6540);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);