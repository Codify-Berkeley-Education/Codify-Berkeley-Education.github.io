"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1692],{3786:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var t=n(4848),i=n(8453);const s={title:"13.3 - Validating Inputs and Throwing Errors",metadata:["Can be provided",{as:"objects",or:"arrays"}]},a=void 0,o={id:"Readings/trpc-on-the-server/13.3",title:"13.3 - Validating Inputs and Throwing Errors",description:"In tRPC, ensuring that the data sent to your API is correct and safe is crucial. This is where input validation comes into play. tRPC integrates seamlessly with Zod, a TypeScript-first schema declaration and validation library, to enforce data validation on your procedures. Alongside this, you'll want to handle errors effectively to provide meaningful feedback and ensure the stability of your application.",source:"@site/docs/Readings/13-trpc-on-the-server/13.3.md",sourceDirName:"Readings/13-trpc-on-the-server",slug:"/Readings/trpc-on-the-server/13.3",permalink:"/docs/Readings/trpc-on-the-server/13.3",draft:!1,unlisted:!1,editUrl:"https://github.com/CS61D/website/tree/main/docs/Readings/13-trpc-on-the-server/13.3.md",tags:[],version:"current",frontMatter:{title:"13.3 - Validating Inputs and Throwing Errors",metadata:["Can be provided",{as:"objects",or:"arrays"}]},sidebar:"tutorialSidebar",previous:{title:"13.2 - Queries and Mutations",permalink:"/docs/Readings/trpc-on-the-server/13.2"},next:{title:"Lecture 14 - Authentication and Middleware",permalink:"/docs/Readings/authentication-and-middleware/"}},d={},l=[{value:"Input Validation",id:"input-validation",level:2},{value:"Why Input Validation is Important",id:"why-input-validation-is-important",level:3},{value:"Using Zod for Input Validation",id:"using-zod-for-input-validation",level:3},{value:"Example: Validating Input with Zod",id:"example-validating-input-with-zod",level:3},{value:"Throwing Custom Errors",id:"throwing-custom-errors",level:2},{value:"Example: Throwing Custom Errors",id:"example-throwing-custom-errors",level:3},{value:"Best Practices for Input Validation and Error Handling",id:"best-practices-for-input-validation-and-error-handling",level:2}];function c(e){const r={code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r.p,{children:["In tRPC, ensuring that the data sent to your API is correct and safe is crucial. This is where input validation comes into play. tRPC integrates seamlessly with ",(0,t.jsx)(r.strong,{children:"Zod"}),", a TypeScript-first schema declaration and validation library, to enforce data validation on your procedures. Alongside this, you'll want to handle errors effectively to provide meaningful feedback and ensure the stability of your application."]}),"\n",(0,t.jsx)(r.h2,{id:"input-validation",children:"Input Validation"}),"\n",(0,t.jsx)(r.h3,{id:"why-input-validation-is-important",children:"Why Input Validation is Important"}),"\n",(0,t.jsx)(r.p,{children:"Input validation helps you:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Prevent Invalid Data"}),": By ensuring that only valid data reaches your server, you reduce the risk of bugs, crashes, and security vulnerabilities."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Improve Data Integrity"}),": Consistent data validation ensures that your database remains in a valid state, free of corrupt or malformed data."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Provide Better User Feedback"}),": When inputs are validated, you can provide users with clear, actionable error messages if something goes wrong."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"using-zod-for-input-validation",children:"Using Zod for Input Validation"}),"\n",(0,t.jsx)(r.p,{children:"Zod is a powerful library for defining schemas and validating data in TypeScript. In tRPC, you can use Zod schemas to validate the inputs to your procedures. Let\u2019s see how it works with an example."}),"\n",(0,t.jsx)(r.h3,{id:"example-validating-input-with-zod",children:"Example: Validating Input with Zod"}),"\n",(0,t.jsx)(r.p,{children:"Suppose we have a procedure for creating a new user. We want to ensure that the input data (like username and email) is in the correct format before processing it:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:'import { z } from "zod";\n\nconst userRouter = router({\n  createUser: procedure\n    .input(\n      z.object({\n        username: z\n          .string()\n          .min(3, "Username must be at least 3 characters long"),\n        email: z.string().email("Invalid email address"),\n      }),\n    )\n    .mutation(({ input }) => {\n      // Logic to create a new user\n      return createUserInDatabase(input);\n    }),\n});\n'})}),"\n",(0,t.jsx)(r.p,{children:"In this example:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["The ",(0,t.jsx)(r.code,{children:"username"})," must be a string with at least 3 characters."]}),"\n",(0,t.jsxs)(r.li,{children:["The ",(0,t.jsx)(r.code,{children:"email"})," must be a valid email address format."]}),"\n",(0,t.jsx)(r.li,{children:"If the input does not meet these criteria, Zod will automatically throw a validation error, preventing the procedure from executing with invalid data."}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"throwing-custom-errors",children:"Throwing Custom Errors"}),"\n",(0,t.jsx)(r.p,{children:"In addition to validation errors, you may want to throw custom errors in certain situations, such as when a database operation fails or a resource is not found."}),"\n",(0,t.jsx)(r.h3,{id:"example-throwing-custom-errors",children:"Example: Throwing Custom Errors"}),"\n",(0,t.jsxs)(r.p,{children:["Let\u2019s enhance our ",(0,t.jsx)(r.code,{children:"getUser"})," procedure to throw an error if the user is not found:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:'import { TRPCError } from "@trpc/server";\n\nconst userRouter = router({\n  getUser: procedure.input(z.object({ id: z.string() })).query(({ input }) => {\n    const user = getUserFromDatabase(input.id);\n\n    if (!user) {\n      throw new TRPCError({\n        code: "NOT_FOUND",\n        message: `User with ID ${input.id} not found`,\n      });\n    }\n\n    return user;\n  }),\n});\n'})}),"\n",(0,t.jsx)(r.p,{children:"In this example:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["We use ",(0,t.jsx)(r.code,{children:"TRPCError"})," to throw a custom error when the user is not found in the database."]}),"\n",(0,t.jsxs)(r.li,{children:["The error includes a code (",(0,t.jsx)(r.code,{children:"NOT_FOUND"}),") and a descriptive message."]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"best-practices-for-input-validation-and-error-handling",children:"Best Practices for Input Validation and Error Handling"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Validate All Inputs"}),": Always validate the inputs to your procedures, especially for mutations. This ensures that your application only processes valid data."]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Use Descriptive Error Messages"}),": When throwing errors, provide clear and descriptive messages. This helps with debugging and improves the user experience."]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Handle Errors Gracefully"}),": Ensure that your application can handle errors gracefully. For example, if a user tries to access a resource that doesn\u2019t exist, return a friendly error message rather than letting the application crash."]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Consider Using Custom Error Codes"}),": Use custom error codes to categorize errors, making it easier to handle them on the client side. tRPC\u2019s ",(0,t.jsx)(r.code,{children:"TRPCError"})," provides a way to define custom error codes."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.hr,{})]})}function u(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>o});var t=n(6540);const i={},s=t.createContext(i);function a(e){const r=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);